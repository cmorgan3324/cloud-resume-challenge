var.domain_name
  custom domain for resume site

  Enter a value: 
var.public_bucket_name
  name for S3 bucket to host site

  Enter a value: 
var.zone_name
  route53 hosted zone name (vibebycory.dev)

  Enter a value: 

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.api_backend.archive_file.lambda_zip will be created
  + resource "archive_file" "lambda_zip" {
      + id                  = (known after apply)
      + output_base64sha256 = (known after apply)
      + output_base64sha512 = (known after apply)
      + output_md5          = (known after apply)
      + output_path         = "../../modules/api-backend/lambda.zip"
      + output_sha          = (known after apply)
      + output_sha256       = (known after apply)
      + output_sha512       = (known after apply)
      + output_size         = (known after apply)
      + source_dir          = "/Users/corymorgan/Documents/aws-projects/new-serverless-web-resume/aws-infra/environments/dev/lambda"
      + type                = "zip"
    }

  # module.api_backend.aws_apigatewayv2_api.http_api will be created
  + resource "aws_apigatewayv2_api" "http_api" {
      + api_endpoint                 = (known after apply)
      + api_key_selection_expression = "$request.header.x-api-key"
      + arn                          = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + ip_address_type              = (known after apply)
      + name                         = "resume-visitor-api"
      + protocol_type                = "HTTP"
      + route_selection_expression   = "$request.method $request.path"
      + tags_all                     = (known after apply)
    }

  # module.api_backend.aws_apigatewayv2_integration.lambda_integration will be created
  + resource "aws_apigatewayv2_integration" "lambda_integration" {
      + api_id                                    = (known after apply)
      + connection_type                           = "INTERNET"
      + id                                        = (known after apply)
      + integration_response_selection_expression = (known after apply)
      + integration_type                          = "AWS_PROXY"
      + integration_uri                           = (known after apply)
      + payload_format_version                    = "2.0"
      + timeout_milliseconds                      = (known after apply)
    }

  # module.api_backend.aws_apigatewayv2_route.get_count will be created
  + resource "aws_apigatewayv2_route" "get_count" {
      + api_id             = (known after apply)
      + api_key_required   = false
      + authorization_type = "NONE"
      + id                 = (known after apply)
      + route_key          = "GET /count"
      + target             = (known after apply)
    }

  # module.api_backend.aws_apigatewayv2_stage.default will be created
  + resource "aws_apigatewayv2_stage" "default" {
      + api_id        = (known after apply)
      + arn           = (known after apply)
      + auto_deploy   = true
      + deployment_id = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + name          = "$default"
      + tags_all      = (known after apply)
    }

  # module.api_backend.aws_dynamodb_table.counter_table will be created
  + resource "aws_dynamodb_table" "counter_table" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "id"
      + id               = (known after apply)
      + name             = "resume-visitor-counter"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "dev"
          + "Name"        = "resume-visitor-counter"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Name"        = "resume-visitor-counter"
        }
      + write_capacity   = (known after apply)

      + attribute {
          + name = "id"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.api_backend.aws_iam_role.lambda_role will be created
  + resource "aws_iam_role" "lambda_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "resume-counter-function-dev-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.api_backend.aws_iam_role_policy_attachment.lambda_dynamo will be created
  + resource "aws_iam_role_policy_attachment" "lambda_dynamo" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      + role       = "resume-counter-function-dev-role"
    }

  # module.api_backend.aws_iam_role_policy_attachment.lambda_logs will be created
  + resource "aws_iam_role_policy_attachment" "lambda_logs" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = "resume-counter-function-dev-role"
    }

  # module.api_backend.aws_lambda_function.counter will be created
  + resource "aws_lambda_function" "counter" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "../../modules/api-backend/lambda.zip"
      + function_name                  = "resume-counter-function"
      + handler                        = "lambda_function.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "TABLE_NAME" = "resume-visitor-counter"
            }
        }

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # module.api_backend.aws_lambda_permission.apigw will be created
  + resource "aws_lambda_permission" "apigw" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "resume-counter-function"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "AllowAPIGatewayInvoke"
      + statement_id_prefix = (known after apply)
    }

  # module.static_site.aws_cloudfront_distribution.site_cdn will be created
  + resource "aws_cloudfront_distribution" "site_cdn" {
      + aliases                         = [
          + "yes",
        ]
      + arn                             = (known after apply)
      + caller_reference                = (known after apply)
      + continuous_deployment_policy_id = (known after apply)
      + default_root_object             = "index.html"
      + domain_name                     = (known after apply)
      + enabled                         = true
      + etag                            = (known after apply)
      + hosted_zone_id                  = (known after apply)
      + http_version                    = "http2"
      + id                              = (known after apply)
      + in_progress_validation_batches  = (known after apply)
      + is_ipv6_enabled                 = true
      + last_modified_time              = (known after apply)
      + price_class                     = "PriceClass_All"
      + retain_on_delete                = false
      + staging                         = false
      + status                          = (known after apply)
      + tags                            = {
          + "Environment" = "dev"
          + "Name"        = "CloudFront for yes"
        }
      + tags_all                        = {
          + "Environment" = "dev"
          + "Name"        = "CloudFront for yes"
        }
      + trusted_key_groups              = (known after apply)
      + trusted_signers                 = (known after apply)
      + wait_for_deployment             = true

      + default_cache_behavior {
          + allowed_methods        = [
              + "GET",
              + "HEAD",
            ]
          + cached_methods         = [
              + "GET",
              + "HEAD",
            ]
          + compress               = false
          + default_ttl            = (known after apply)
          + max_ttl                = (known after apply)
          + min_ttl                = 0
          + target_origin_id       = "s3-yes"
          + trusted_key_groups     = (known after apply)
          + trusted_signers        = (known after apply)
          + viewer_protocol_policy = "redirect-to-https"

          + forwarded_values {
              + headers                 = (known after apply)
              + query_string            = false
              + query_string_cache_keys = (known after apply)

              + cookies {
                  + forward           = "none"
                  + whitelisted_names = (known after apply)
                }
            }

          + grpc_config (known after apply)
        }

      + origin {
          + connection_attempts      = 3
          + connection_timeout       = 10
          + domain_name              = (known after apply)
          + origin_id                = "s3-yes"
            # (2 unchanged attributes hidden)

          + s3_origin_config {
              + origin_access_identity = (known after apply)
            }
        }

      + restrictions {
          + geo_restriction {
              + locations        = (known after apply)
              + restriction_type = "none"
            }
        }

      + viewer_certificate {
          + cloudfront_default_certificate = true
          + minimum_protocol_version       = "TLSv1.2_2021"
          + ssl_support_method             = "sni-only"
        }
    }

  # module.static_site.aws_cloudfront_origin_access_identity.oai will be created
  + resource "aws_cloudfront_origin_access_identity" "oai" {
      + arn                             = (known after apply)
      + caller_reference                = (known after apply)
      + cloudfront_access_identity_path = (known after apply)
      + comment                         = "OAI for yes"
      + etag                            = (known after apply)
      + iam_arn                         = (known after apply)
      + id                              = (known after apply)
      + s3_canonical_user_id            = (known after apply)
    }

  # module.static_site.aws_iam_policy.s3_read_policy will be created
  + resource "aws_iam_policy" "s3_read_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "policy allowing cloudfront to read from S3 bucket"
      + id               = (known after apply)
      + name             = "yes-cloudfront-s3-read"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.static_site.aws_iam_role.cloudfront_role will be created
  + resource "aws_iam_role" "cloudfront_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "cloudfront.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "yes-cf-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.static_site.aws_iam_role_policy_attachment.attach_s3_read will be created
  + resource "aws_iam_role_policy_attachment" "attach_s3_read" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "yes-cf-role"
    }

  # module.static_site.aws_s3_bucket.site will be created
  + resource "aws_s3_bucket" "site" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "yes"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "dev"
          + "Name"        = "Static resume site"
        }
      + tags_all                    = {
          + "Environment" = "dev"
          + "Name"        = "Static resume site"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.static_site.aws_s3_bucket_acl.site_acl will be created
  + resource "aws_s3_bucket_acl" "site_acl" {
      + acl    = "public-read"
      + bucket = (known after apply)
      + id     = (known after apply)

      + access_control_policy (known after apply)
    }

  # module.static_site.aws_s3_bucket_ownership_controls.site will be created
  + resource "aws_s3_bucket_ownership_controls" "site" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + object_ownership = "ObjectWriter"
        }
    }

  # module.static_site.aws_s3_bucket_policy.site_policy will be created
  + resource "aws_s3_bucket_policy" "site_policy" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.static_site.aws_s3_bucket_public_access_block.site will be created
  + resource "aws_s3_bucket_public_access_block" "site" {
      + block_public_acls       = false
      + block_public_policy     = false
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = false
      + restrict_public_buckets = false
    }

  # module.static_site.aws_s3_bucket_website_configuration.site will be created
  + resource "aws_s3_bucket_website_configuration" "site" {
      + bucket           = (known after apply)
      + id               = (known after apply)
      + routing_rules    = (known after apply)
      + website_domain   = (known after apply)
      + website_endpoint = (known after apply)

      + error_document {
          + key = "error.html"
        }

      + index_document {
          + suffix = "index.html"
        }

      + routing_rule (known after apply)
    }

Plan: 22 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + site_bucket = (known after apply)
  + site_cdn    = (known after apply)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
