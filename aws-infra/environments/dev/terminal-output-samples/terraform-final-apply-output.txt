module.static_site.data.aws_route53_zone.primary: Reading...
module.static_site.data.aws_route53_zone.primary: Read complete after 1s [id=Z0184558A8BYZ5FK96SD]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.api_backend.archive_file.lambda_zip will be created
  + resource "archive_file" "lambda_zip" {
      + id                  = (known after apply)
      + output_base64sha256 = (known after apply)
      + output_base64sha512 = (known after apply)
      + output_md5          = (known after apply)
      + output_path         = "../../modules/api-backend/lambda.zip"
      + output_sha          = (known after apply)
      + output_sha256       = (known after apply)
      + output_sha512       = (known after apply)
      + output_size         = (known after apply)
      + source_dir          = "/Users/corymorgan/Documents/aws-projects/new-serverless-web-resume/aws-infra/environments/dev/lambda"
      + type                = "zip"
    }

  # module.api_backend.aws_apigatewayv2_api.http_api will be created
  + resource "aws_apigatewayv2_api" "http_api" {
      + api_endpoint                 = (known after apply)
      + api_key_selection_expression = "$request.header.x-api-key"
      + arn                          = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + ip_address_type              = (known after apply)
      + name                         = "resume-visitor-api"
      + protocol_type                = "HTTP"
      + route_selection_expression   = "$request.method $request.path"
      + tags_all                     = (known after apply)
    }

  # module.api_backend.aws_apigatewayv2_integration.lambda_integration will be created
  + resource "aws_apigatewayv2_integration" "lambda_integration" {
      + api_id                                    = (known after apply)
      + connection_type                           = "INTERNET"
      + id                                        = (known after apply)
      + integration_response_selection_expression = (known after apply)
      + integration_type                          = "AWS_PROXY"
      + integration_uri                           = (known after apply)
      + payload_format_version                    = "2.0"
      + timeout_milliseconds                      = (known after apply)
    }

  # module.api_backend.aws_apigatewayv2_route.get_count will be created
  + resource "aws_apigatewayv2_route" "get_count" {
      + api_id             = (known after apply)
      + api_key_required   = false
      + authorization_type = "NONE"
      + id                 = (known after apply)
      + route_key          = "GET /count"
      + target             = (known after apply)
    }

  # module.api_backend.aws_apigatewayv2_stage.default will be created
  + resource "aws_apigatewayv2_stage" "default" {
      + api_id        = (known after apply)
      + arn           = (known after apply)
      + auto_deploy   = true
      + deployment_id = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + name          = "$default"
      + tags_all      = (known after apply)
    }

  # module.api_backend.aws_dynamodb_table.counter_table will be created
  + resource "aws_dynamodb_table" "counter_table" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "id"
      + id               = (known after apply)
      + name             = "resume-visitor-counter"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "dev"
          + "Name"        = "resume-visitor-counter"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Name"        = "resume-visitor-counter"
        }
      + write_capacity   = (known after apply)

      + attribute {
          + name = "id"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.api_backend.aws_iam_role.lambda_role will be created
  + resource "aws_iam_role" "lambda_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "resume-counter-function-dev-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.api_backend.aws_iam_role_policy_attachment.lambda_dynamo will be created
  + resource "aws_iam_role_policy_attachment" "lambda_dynamo" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      + role       = "resume-counter-function-dev-role"
    }

  # module.api_backend.aws_iam_role_policy_attachment.lambda_logs will be created
  + resource "aws_iam_role_policy_attachment" "lambda_logs" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = "resume-counter-function-dev-role"
    }

  # module.api_backend.aws_lambda_function.counter will be created
  + resource "aws_lambda_function" "counter" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "../../modules/api-backend/lambda.zip"
      + function_name                  = "resume-counter-function"
      + handler                        = "lambda_function.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "TABLE_NAME" = "resume-visitor-counter"
            }
        }

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # module.api_backend.aws_lambda_permission.apigw will be created
  + resource "aws_lambda_permission" "apigw" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "resume-counter-function"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "AllowAPIGatewayInvoke"
      + statement_id_prefix = (known after apply)
    }

  # module.static_site.aws_acm_certificate.site_cert will be created
  + resource "aws_acm_certificate" "site_cert" {
      + arn                       = (known after apply)
      + domain_name               = "vibebycory.dev"
      + domain_validation_options = [
          + {
              + domain_name           = "vibebycory.dev"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
        ]
      + id                        = (known after apply)
      + key_algorithm             = (known after apply)
      + not_after                 = (known after apply)
      + not_before                = (known after apply)
      + pending_renewal           = (known after apply)
      + renewal_eligibility       = (known after apply)
      + renewal_summary           = (known after apply)
      + status                    = (known after apply)
      + subject_alternative_names = [
          + "vibebycory.dev",
        ]
      + tags                      = {
          + "Name" = "TLS cert for vibebycory.dev"
        }
      + tags_all                  = {
          + "Name" = "TLS cert for vibebycory.dev"
        }
      + type                      = (known after apply)
      + validation_emails         = (known after apply)
      + validation_method         = "DNS"

      + options (known after apply)
    }

  # module.static_site.aws_acm_certificate_validation.site_cert_validation will be created
  + resource "aws_acm_certificate_validation" "site_cert_validation" {
      + certificate_arn         = (known after apply)
      + id                      = (known after apply)
      + validation_record_fqdns = (known after apply)
    }

  # module.static_site.aws_cloudfront_distribution.site_cdn will be created
  + resource "aws_cloudfront_distribution" "site_cdn" {
      + aliases                         = [
          + "vibebycory.dev",
        ]
      + arn                             = (known after apply)
      + caller_reference                = (known after apply)
      + continuous_deployment_policy_id = (known after apply)
      + default_root_object             = "index.html"
      + domain_name                     = (known after apply)
      + enabled                         = true
      + etag                            = (known after apply)
      + hosted_zone_id                  = (known after apply)
      + http_version                    = "http2"
      + id                              = (known after apply)
      + in_progress_validation_batches  = (known after apply)
      + is_ipv6_enabled                 = true
      + last_modified_time              = (known after apply)
      + price_class                     = "PriceClass_All"
      + retain_on_delete                = false
      + staging                         = false
      + status                          = (known after apply)
      + tags                            = {
          + "Environment" = "dev"
          + "Name"        = "CloudFront for vibebycory.dev"
        }
      + tags_all                        = {
          + "Environment" = "dev"
          + "Name"        = "CloudFront for vibebycory.dev"
        }
      + trusted_key_groups              = (known after apply)
      + trusted_signers                 = (known after apply)
      + wait_for_deployment             = true

      + default_cache_behavior {
          + allowed_methods        = [
              + "GET",
              + "HEAD",
            ]
          + cached_methods         = [
              + "GET",
              + "HEAD",
            ]
          + compress               = false
          + default_ttl            = (known after apply)
          + max_ttl                = (known after apply)
          + min_ttl                = 0
          + target_origin_id       = "s3-vibebycory-resume-content"
          + trusted_key_groups     = (known after apply)
          + trusted_signers        = (known after apply)
          + viewer_protocol_policy = "redirect-to-https"

          + forwarded_values {
              + headers                 = (known after apply)
              + query_string            = false
              + query_string_cache_keys = (known after apply)

              + cookies {
                  + forward           = "none"
                  + whitelisted_names = (known after apply)
                }
            }

          + grpc_config (known after apply)
        }

      + origin {
          + connection_attempts      = 3
          + connection_timeout       = 10
          + domain_name              = (known after apply)
          + origin_id                = "s3-vibebycory-resume-content"
            # (2 unchanged attributes hidden)

          + s3_origin_config {
              + origin_access_identity = (known after apply)
            }
        }

      + restrictions {
          + geo_restriction {
              + locations        = (known after apply)
              + restriction_type = "none"
            }
        }

      + viewer_certificate {
          + acm_certificate_arn      = (known after apply)
          + minimum_protocol_version = "TLSv1.2_2021"
          + ssl_support_method       = "sni-only"
        }
    }

  # module.static_site.aws_cloudfront_origin_access_identity.oai will be created
  + resource "aws_cloudfront_origin_access_identity" "oai" {
      + arn                             = (known after apply)
      + caller_reference                = (known after apply)
      + cloudfront_access_identity_path = (known after apply)
      + comment                         = "OAI for vibebycory-resume-content"
      + etag                            = (known after apply)
      + iam_arn                         = (known after apply)
      + id                              = (known after apply)
      + s3_canonical_user_id            = (known after apply)
    }

  # module.static_site.aws_route53_record.cert_validation will be created
  + resource "aws_route53_record" "cert_validation" {
      + allow_overwrite = (known after apply)
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = (known after apply)
      + records         = (known after apply)
      + ttl             = 300
      + type            = (known after apply)
      + zone_id         = "Z0184558A8BYZ5FK96SD"
    }

  # module.static_site.aws_s3_bucket.site will be created
  + resource "aws_s3_bucket" "site" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "vibebycory-resume-content"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "dev"
          + "Name"        = "Static resume site"
        }
      + tags_all                    = {
          + "Environment" = "dev"
          + "Name"        = "Static resume site"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.static_site.aws_s3_bucket_acl.site_acl will be created
  + resource "aws_s3_bucket_acl" "site_acl" {
      + acl    = "private"
      + bucket = (known after apply)
      + id     = (known after apply)

      + access_control_policy (known after apply)
    }

  # module.static_site.aws_s3_bucket_ownership_controls.site will be created
  + resource "aws_s3_bucket_ownership_controls" "site" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + object_ownership = "ObjectWriter"
        }
    }

  # module.static_site.aws_s3_bucket_policy.site_policy will be created
  + resource "aws_s3_bucket_policy" "site_policy" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.static_site.aws_s3_bucket_public_access_block.site will be created
  + resource "aws_s3_bucket_public_access_block" "site" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.static_site.aws_s3_bucket_website_configuration.site will be created
  + resource "aws_s3_bucket_website_configuration" "site" {
      + bucket           = (known after apply)
      + id               = (known after apply)
      + routing_rules    = (known after apply)
      + website_domain   = (known after apply)
      + website_endpoint = (known after apply)

      + error_document {
          + key = "error.html"
        }

      + index_document {
          + suffix = "index.html"
        }

      + routing_rule (known after apply)
    }

Plan: 22 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + site_bucket = (known after apply)
  + site_cdn    = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: 
module.api_backend.archive_file.lambda_zip: Creating...
module.api_backend.archive_file.lambda_zip: Creation complete after 0s [id=8b3907e8919a831977aa8e98d3c040ae9e5f9526]
module.static_site.aws_cloudfront_origin_access_identity.oai: Creating...
module.api_backend.aws_iam_role.lambda_role: Creating...
module.api_backend.aws_apigatewayv2_api.http_api: Creating...
module.static_site.aws_acm_certificate.site_cert: Creating...
module.api_backend.aws_dynamodb_table.counter_table: Creating...
module.static_site.aws_s3_bucket.site: Creating...
module.api_backend.aws_iam_role.lambda_role: Creation complete after 1s [id=resume-counter-function-dev-role]
module.api_backend.aws_iam_role_policy_attachment.lambda_dynamo: Creating...
module.api_backend.aws_iam_role_policy_attachment.lambda_logs: Creating...
module.api_backend.aws_apigatewayv2_api.http_api: Creation complete after 1s [id=d65te3a1yl]
module.api_backend.aws_apigatewayv2_stage.default: Creating...
module.api_backend.aws_iam_role_policy_attachment.lambda_dynamo: Creation complete after 0s [id=resume-counter-function-dev-role-20250531195435672600000003]
module.api_backend.aws_iam_role_policy_attachment.lambda_logs: Creation complete after 0s [id=resume-counter-function-dev-role-20250531195435802700000004]
module.static_site.aws_cloudfront_origin_access_identity.oai: Creation complete after 1s [id=E2PZCBV71R964E]
module.api_backend.aws_apigatewayv2_stage.default: Creation complete after 0s [id=$default]
module.static_site.aws_s3_bucket.site: Creation complete after 2s [id=vibebycory-resume-content]
module.static_site.aws_s3_bucket_policy.site_policy: Creating...
module.static_site.aws_s3_bucket_public_access_block.site: Creating...
module.static_site.aws_s3_bucket_ownership_controls.site: Creating...
module.static_site.aws_s3_bucket_website_configuration.site: Creating...
module.static_site.aws_s3_bucket_ownership_controls.site: Creation complete after 0s [id=vibebycory-resume-content]
module.static_site.aws_s3_bucket_public_access_block.site: Creation complete after 0s [id=vibebycory-resume-content]
module.static_site.aws_s3_bucket_website_configuration.site: Creation complete after 0s [id=vibebycory-resume-content]
module.static_site.aws_s3_bucket_acl.site_acl: Creating...
module.static_site.aws_s3_bucket_acl.site_acl: Creation complete after 0s [id=vibebycory-resume-content,private]
module.static_site.aws_acm_certificate.site_cert: Creation complete after 8s [id=arn:aws:acm:us-east-1:864899872694:certificate/5a1ae22e-8080-4390-8daf-9c2508d9d35b]
module.static_site.aws_route53_record.cert_validation: Creating...
module.api_backend.aws_dynamodb_table.counter_table: Still creating... [00m10s elapsed]
module.static_site.aws_s3_bucket_policy.site_policy: Creation complete after 8s [id=vibebycory-resume-content]
module.api_backend.aws_dynamodb_table.counter_table: Creation complete after 14s [id=resume-visitor-counter]
module.api_backend.aws_lambda_function.counter: Creating...
module.static_site.aws_route53_record.cert_validation: Still creating... [00m10s elapsed]
module.api_backend.aws_lambda_function.counter: Creation complete after 6s [id=resume-counter-function]
module.api_backend.aws_lambda_permission.apigw: Creating...
module.api_backend.aws_apigatewayv2_integration.lambda_integration: Creating...
module.api_backend.aws_lambda_permission.apigw: Creation complete after 1s [id=AllowAPIGatewayInvoke]
module.api_backend.aws_apigatewayv2_integration.lambda_integration: Creation complete after 1s [id=mnm0ke2]
module.api_backend.aws_apigatewayv2_route.get_count: Creating...
module.api_backend.aws_apigatewayv2_route.get_count: Creation complete after 0s [id=vi1g14h]
module.static_site.aws_route53_record.cert_validation: Still creating... [00m20s elapsed]
module.static_site.aws_route53_record.cert_validation: Still creating... [00m30s elapsed]
module.static_site.aws_route53_record.cert_validation: Creation complete after 31s [id=Z0184558A8BYZ5FK96SD__3afcfe0e8e2e44d0e7f246b31e9cd4b8.vibebycory.dev._CNAME]
module.static_site.aws_acm_certificate_validation.site_cert_validation: Creating...
module.static_site.aws_acm_certificate_validation.site_cert_validation: Creation complete after 1s [id=2025-05-31 19:54:51.348 +0000 UTC]
module.static_site.aws_cloudfront_distribution.site_cdn: Creating...
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [00m10s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [00m20s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [00m30s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [00m40s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [00m50s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [01m00s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [01m10s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [01m20s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [01m30s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [01m40s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [01m50s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [02m00s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [02m10s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [02m20s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [02m30s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [02m40s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [02m50s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [03m00s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [03m10s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [03m20s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [03m30s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [03m40s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [03m50s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [04m00s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [04m10s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [04m20s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [04m30s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [04m40s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [04m50s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [05m00s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [05m10s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Still creating... [05m20s elapsed]
module.static_site.aws_cloudfront_distribution.site_cdn: Creation complete after 5m26s [id=E1UC7R91BLYHFO]

Apply complete! Resources: 22 added, 0 changed, 0 destroyed.

Outputs:

site_bucket = "vibebycory-resume-content"
site_cdn = "d3heme67w4pl5m.cloudfront.net"
